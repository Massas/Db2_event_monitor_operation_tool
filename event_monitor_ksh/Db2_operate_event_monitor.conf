#!/usr/bin/ksh
##############################################
##    Db2_operate_event_monitor.conf
##############################################

# Db2_operate_event_monitor.shの関数をまとめてある

##############
#  変数の定義  #
##############
DBNAME=""
ID=""
PASSWD=""
OWNER=""
GROUP=""
AUTHVALUE=755

##############
#  関数の定義  #
##############

#-----------------------------------
# print_fundamental_information
# 基本的な情報を標準出力する(現在時刻、ログインユーザ、ホスト名、現在のディレクトリ)
#-----------------------------------
function print_fundamental_information
{
    echo
    echo '#================================='
    echo '#  基本情報 date;whoami;hostname;pwd'
    echo '#================================='
    
    date;whoami;hostname;pwd

    echo
}

#-----------------------------------
# connect_to_database
# データベースに接続する
#-----------------------------------
function connect_to_database
{
    echo
    echo '#================================='
    echo '#  DBに接続する                    '
    echo '#================================='

    # db2 connect to $DBNAME user $ID using $PASSWD
    db2 connect to $DBNAME

    echo

}

#-----------------------------------
# create_event_monitor
# イベントモニターを作成する
#-----------------------------------
function create_event_monitor
{
    # イベントモニター名
    NAME=""
    # イベントモニターのタイプ
    TYPE=""
    # イベントモニターのアウトプット先ディレクトリ
    EVEPATH=""

    echo "作成したいイベントモニターの名前を指定してください(任意)"
    read NAME
    echo "入力した値： $NAME"

    echo "イベントモニターのタイプを指定してください(カンマ区切りで複数選択可能です)"
    echo "#------------------------------------------"
    echo '・STATEMENTS：SQLステートメントの実行に関する情報'
    echo '・CONNECTIONS：アプリケーションの接続、切断、ロックエスカレーション等の情報'
    echo '・DATABASE：データベース全体の諸情報'
    echo '・TRANSACTIONS：トランザクション開始/停止時刻等情報(Db2 V11.5現在非推奨)'
    echo 'その他にも様々なタイプがあります。必要に応じて調査し、指定してください'
    read TYPE
    echo "入力した値： $TYPE"

    echo "イベントモニターのアウトプット先ディレクトリを指定してください"
    echo '絶対パスでの指定をお願いします'
    echo '現存するディレクトリより2階層深いディレクトリは指定できない仕様です(mkdirがエラーになります)'
    read EVEPATH
    echo "入力した値： $EVEPATH"

    # 入力値判定
    if [ $EVEPATH -eq '.' -o $EVEPATH -eq '..' ]
    then
        echo "絶対パスで指定してください"
        echo "機能の選択まで戻ります"
        return 91
    else
        echo ""
    fi

    # ディレクトリの存在を確認する。指定したディレクトリが無ければ作成する
    if [ ! -e $EVEPATH ]
    then
        mkdir $EVEPATH
        if [ $? -eq 0 ]
        then
            echo "$EVEPATHを作成しました"
        else
            echo "$EVEPATHの作成に失敗しました"
            echo "機能の選択まで戻ります"
            return 92
        fi
        chmod $AUTHVALUE $EVEPATH
        chown $OWNER:$GROUP $EVEPATH
    else
        echo "$EVEPATHは既存のディレクトリのため、mkdirしません"
    fi

    ./create_event_monitor.sh $NAME $TYPE $EVEPATH

}

#-----------------------------------
# drop_event_monitor
# イベントモニターを削除する
#-----------------------------------
function drop_event_monitor
{
    # イベントモニター名
    NAME=""

    echo "削除したいイベントモニターの名前を指定してください"
    read NAME
    echo "入力した値： $NAME"

    ./drop_event_monitor.sh $NAME

}

#-----------------------------------
# start_event_monitor
# イベントモニターを起動する
#-----------------------------------
function start_event_monitor
{
    # イベントモニター名
    NAME=""

    echo "起動したいイベントモニターの名前を指定してください"
    read NAME
    echo "入力した値： $NAME"

    ./start_event_monitor.sh $NAME

}

#-----------------------------------
# stop_event_monitor
# イベントモニターを停止する
#-----------------------------------
function stop_event_monitor
{
    # イベントモニター名
    NAME=""

    echo "停止したいイベントモニターの名前を指定してください"
    read NAME
    echo "入力した値： $NAME"

    ./stop_event_monitor.sh $NAME

}

#-----------------------------------
# check_event_monitor
# イベントモニターの設定・状況を確認する
#-----------------------------------
function check_event_monitor
{
    select cmd in STATUS TARGETDIR ALL CANCEL
    do
        case $cmd in
            STATUS)
                echo "現存するイベントモニター名とステータスを表示します"

                ./check_event_monitor.sh 1
                ;;
            TARGETDIR)
                echo "現存するイベントモニター名とアウトプット先のディレクトリを表示します"
                
                ./check_event_monitor.sh 2
                ;;
            ALL)
                echo "現存するイベントモニターの情報を一覧表示します"
                
                ./check_event_monitor.sh 3
                ;;
            CANCEL)
                echo "チェックモードを終了します"
                break
                ;;
            *)
                echo "$REPLY という選択肢はありません"
    esac
    done 
}

#-----------------------------------
# format_event_monitor
# イベントモニターをフォーマットする
#-----------------------------------
function format_event_monitor
{
    # イベントモニター名
    NAME=""

    # echo "フォーマットしたいイベントモニターの名前を指定してください"
    # read NAME
    # echo "入力した値： $NAME"

    ./format_event_monitor.sh

}

#-----------------------------------
# clear_event_monitor_files
# イベントモニターのアウトプットファイルを削除する
#-----------------------------------
function clear_event_monitor_files
{
    # イベントモニター名
    NAME=""

    # echo "アウトプットファイルを削除したいイベントモニターの名前を指定してください"
    # read NAME
    # echo "入力した値： $NAME"

    ./clear_event_monitor_files.sh

}

#-----------------------------------
# print_command
# コマンド文字列を標準出力する：テスト用
# 第一引数：文字列
#-----------------------------------
function print_command
{
    echo "実行されるコマンドを確認します"
    echo "実行されるコマンド文字列：$1"
}

#-----------------------------------
# print_result
# 結果を標準出力する：テスト用
# 第一引数：関数名
# 第二引数：RET_CODE(戻り値を格納する変数)
#-----------------------------------
function print_result
{
    # 実行結果を保存
    RET_CODE=$2

    if [ RET_CODE -ne 0 ]; then
        echo "失敗しました：$1 RET_CODE=$RET_CODE"
    else
        echo "成功しました：$1 RET_CODE=$RET_CODE"
    fi
}
