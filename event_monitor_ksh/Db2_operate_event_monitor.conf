#!/usr/bin/ksh
##############################################
##    Db2_operate_event_monitor.conf
##############################################

# Db2_operate_event_monitor.shの関数をまとめてある

##############
#  関数の定義  #
##############

#-----------------------------------
# print_fundamental_information
# 基本的な情報を標準出力する(現在時刻、ログインユーザ、ホスト名、現在のディレクトリ)
#-----------------------------------
function print_fundamental_information
{
    echo
    echo '#================================='
    echo '#  基本情報 date;whoami;hostname;pwd'
    echo '#=================================\n'
    
    date;whoami;hostname;pwd

    echo
}

#-----------------------------------
# connect_to_database
# データベースに接続する
#-----------------------------------
function connect_to_database
{
    echo
    echo '#================================='
    echo '#  DBに接続する                    '
    echo '#=================================\n'

    db2 connect to DBNAME user ID using pwd

    echo

}

#-----------------------------------
# create_event_monitor
# イベントモニターを作成する
#-----------------------------------
function create_event_monitor
{
    # イベントモニター名
    NAME=""
    # イベントモニターのタイプ
    TYPE=""
    # イベントモニターのアウトプット先ディレクトリ
    EVEPATH=""

    echo "作成したいイベントモニターの名前を指定してください(任意)\n"
    read NAME
    echo "入力した値： $NAME\n"

    echo "イベントモニターのタイプを指定してください\n"
    read TYPE
    echo "入力した値： $TYPE\n"

    echo "イベントモニターのアウトプット先ディレクトリを指定してください\n"
    read EVEPATH
    echo "入力した値： $EVEPATH\n"

    ./create_event_monitor.sh $NAME $TYPE $EVEPATH

}

#-----------------------------------
# drop_event_monitor
# イベントモニターを削除する
#-----------------------------------
function drop_event_monitor
{
    # イベントモニター名
    NAME=""

    echo "削除したいイベントモニターの名前を指定してください\n"
    read NAME
    echo "入力した値： $NAME\n"

    ./drop_event_monitor.sh $NAME

}

#-----------------------------------
# start_event_monitor
# イベントモニターを起動する
#-----------------------------------
function start_event_monitor
{
    # イベントモニター名
    NAME=""

    echo "起動したいイベントモニターの名前を指定してください\n"
    read NAME
    echo "入力した値： $NAME\n"

    ./start_event_monitor.sh $NAME

}

#-----------------------------------
# stop_event_monitor
# イベントモニターを停止する
#-----------------------------------
function stop_event_monitor
{
    # イベントモニター名
    NAME=""

    echo "停止したいイベントモニターの名前を指定してください\n"
    read NAME
    echo "入力した値： $NAME\n"

    ./stop_event_monitor.sh $NAME

}

#-----------------------------------
# check_event_monitor
# イベントモニターの設定・状況を確認する
#-----------------------------------
function check_event_monitor
{
    select cmd in STATUS TARGETDIR TYPE ALL CANCEL
    do
        case $cmd in
            STATUS)
                echo "現存するイベントモニター名とステータスを表示します\n"

                check_event_monitor.sh 1
                ;;
            TARGETDIR)
                echo "現存するイベントモニター名とアウトプット先のディレクトリを表示します\n"
                
                check_event_monitor.sh 2
                ;;
            ALL)
                echo "現存するイベントモニターの情報を一覧表示します\n"
                
                check_event_monitor.sh 3
                ;;
            CANCEL)
                echo "チェックモードを終了します\n"
                break
                ;;
            *)
                echo "$REPLY という選択肢はありません\n"
}

#-----------------------------------
# format_event_monitor
# イベントモニターをフォーマットする
#-----------------------------------
function format_event_monitor
{
    # イベントモニター名
    NAME=""

    echo "フォーマットしたいイベントモニターの名前を指定してください\n"
    read NAME
    echo "入力した値： $NAME\n"

    echo "言語を日本語(Ja_JP)に設定する\n"
    export LANG=Ja_JP

    ./format_event_monitor.sh $NAME

}

#-----------------------------------
# clear_event_monitor_files
# イベントモニターのアウトプットファイルを削除する
#-----------------------------------
function clear_event_monitor_files
{
    # イベントモニター名
    NAME=""

    echo "アウトプットファイルを削除したいイベントモニターの名前を指定してください\n"
    read NAME
    echo "入力した値： $NAME\n"

    ./clear_event_monitor_files.sh $NAME

}

#-----------------------------------
# print_command
# コマンド文字列を標準出力する：テスト用
# 第一引数：文字列
#-----------------------------------
function print_command
{
    echo "実行されるコマンドを確認します\n"
    echo "実行されるコマンド文字列：$1\n"
}

#-----------------------------------
# print_result
# 結果を標準出力する：テスト用
# 第一引数：関数名
# 第二引数：RET_CODE(戻り値を格納する変数)
#-----------------------------------
function print_result
{
    # 実行結果を保存
    RET_CODE=$2

    if [ RET_CODE -ne 0 ] then
        echo "失敗しました：$1 RET_CODE=$RET_CODE \n"
    else
        echo "成功しました：$1 RET_CODE=$RET_CODE \n"
    fi
}
